Programming Elixir 1.2
Dave Thomas
2016

Chapter 1: Take the Red Pill

  Programming Should Be About Transforming Data
  Installing Elixir
  Running Elixir
  Suggestions for Reading the Book
  Exercises
  Think Different(ly)

Part 1 Conventional Programming

Chapter 2 Pattern Matching

  Assignment: I Do Not Think It Means What You Think It Means.

    = match operator

  More Complex Matches

    [1, 2, 3] list
    [a, b, c] = [1, 2, 3] pattern matching

  Your Turn

    Exercise: PatternMatching-1
    Which of the following will match?

      a = [1, 2, 3] # will match => a = [1, 2, 3]
      a = 4 # will match => a = 4
      4 = a # will match => a = 4
      [a, b] = [1, 2, 3] # will not match
      a = [[1, 2, 3]] # will match a = [[1, 2, 3]]
      [a] = [[1, 2, 3]] # will match a = [1, 2, 3]
      [[a]] = [[1, 2, 3]] # will not match

  Ignoring a Value with _ (Underscore)

  Variables Bind Once (per Match)

    ^ (a caret) pin operator

  Your Turn

    Exercise: PatternMatching-2
    Which of the following will match?

      [a, b, a] = [1, 2, 3] # will not match
      [a, b, a] = [1, 1, 2] # will not match
      [a, b, a] = [1, 2, 1] # will match => a = 1, b = 2

    Exercise: PatternMatching-3
    The variable a is bound to 2. Which of the following will match?

      [a, b, a] = [1, 2, 3] # will not match
      [a, b, a] = [1, 1, 2] # will not match
      a = 1 # will match => a = 1
      ^a = 2 # will match => a = 2
      ^a = 1 # will not match
      ^a = 2 - a # will not match

  Another Way of Looking at the Equals Sign

Chapter 3 Immutability

  You Already Have (Some) Immutable Data
  Immutable Data Is Known Data
  Performance Implications of Immutability
  Coding with Immutable Data

Chapter 4 Elixir Basics

  Built-in Types

    Value types
      Arbitray-sized integers
      Floating-point numbers
      Atoms
      Ranges
      Regular expressions
    System types
      PIDs and ports
      References
    Collection types
      Tuples
      Lists
      Maps
      Binaries

  Value Types

    Integers
      Unlimited size
      e.g.
        Decimal 1234 1_000_000
        Hexadicimal 0xcafe
        Octal 0o765
        Binary 0b1010
    Floating-point numbers
      Must contain one dicimal with at least one digit on each side
      May contain trailing exponent
      IEEE 754 double precision
      e.g.
        1.0
        0.2456
        0.314159e1
        314159.0e-5
    Atoms
      Constants that represent names
      : followed by atom word or Elixir operator
      Atom word may contain
        Letters
        Digits
        Underscores
        @ signs
      May end with
        !
        ?
      :"arbitray characters"
      e.g.
        :fred
        :is_binary?
        :var@2
        :<>
        :===
        :"func/3"
        :"long john silver"
    Ranges
      start..end
      start and end must be integer
    Regular expressions
      ~r{regexp} or ~r{regexp}opts
      Delimeters can be any non-alpha-numeric characters
      / must be escaped if / is the delimeter
      Implemened with PCRE, compatible with Perl 5

  System Types

    PID refers to a local or remote process
    Port refers to a resource you are reading or writing
    Current process' PID is availale by calling self
    make_ref creates a globally unique reference

  Collection Types

    Tuples
      Ordered collection of values
      Typically has 2 to 4 elements, if more, use maps or structs
      Common for functions to return a tuple that begins with :ok if successful
      e.g.
        {1, 2}
        {:ok, 42, "next"}
        {:error, :enoent}
    Lists
      Linked list
      Operators
        ++
        --
        in
    Keyword Lists
      [name: "Dave", city: "Dallas", likes: "Programming"] =>
      [{:name, "Dave"}, {:city, "Dallas"}, {:likes, "Programming"}]
      May leave off the square brackets if a keyword list is the last element in a function call
      May leave off the brackets if a keyword list appears as the last item in any conext where
        a list of value is expected

  Maps

    Collection of key/value pairs
    e.g.
      states = %{"AL" => "Alabama", "WI" => "Wisconsin"}
      response_types = %{{:error, :enoent} => :fatal, {:error, :busy} => :retry}
      colors = %{:red => 0xff0000, :green => 0x00ff00; :blue => 0x0000ff}
    Key types can differ
      %{"one" => 1, :two => 2, {1, 1, 1} => 3}
    Shortcut when key is atom
      %{blue: 255, green: 65280, red: 16711680}
    Keys must be unique, contrary to keyword list
    Efficient to grow
    Accessing
      states["AL"]
      colors[:red]
      colors.green # only when key is atom

  Binaries

    Bits and bytes
    e.g.
      <<1, 2>>
      <<3::size(2), 5::size(4), 1::size(2)>>

  Names, Source Files, Conventions, Operators, and So On

    Names
      BumpyCase
        Module
        Record
        Protocol
        Behavior
      snake_case
        Others
    Truth
      false
      nil (treated as false in Boolean context)
      true (truthy: neither false nor nil in most contexts)
    Operators
      Comparison operators
        a === b # strict equality, so 1 === 1.0 is false
        a !== b # strict inequality, so 1 !== 1.0 is true
        a == b # value equality, so 1 == 1.0 is true
        a != b # value inequality, so 1 != 1.0 is false
        a > b
        a >= b
        a < b
        a <= b
        ordering comparisons
          number < atom < reference < function < port < pid < tuple < map < list < binary
      Boolean operators
        Strict: expect true or false as first argument
          a or b # true if a is true, otherwise b
          a and b # false if a is false, otherwise b
          not a # false if a is true, true otherwise
        Relaxed: take arguments of any type. Any value other than false or nil is true.
          a || b # a if a is truthy, otherwise b
          a && b # b if a is truthy, otherwise a
          !a # false if a is truthy, otherwise true
      Arithmatic operators
        +
        -
        *
        / # integer division yields floating point result, e.g. 2 / 1 => 2.0
        div # div(a, b) gets integer result
        rem # result has the same sign as first argument, e.g. rem(15, 4) => 3, rem(-15, 4) => -3
      Join operators
        binary1 <> binary2 # cancatenates two binaries
        list1 ++ list2 # cancatenates two lists
        list1 -- list2 # returns elements in list1 but not in list2
      The in operator
        a in enum # test if a is included in enum, e.g. a list or a range

  Variable Scope

    Lexically scoped
      Variables (including parameters) defined in a function are local to that function.
      Variables defined in a module are local.
        They are only accessible at the top level of the module.
        They are not accessible in functions defined in the module.
      For
      With
    with
      Defines a local scope for variables
      Pattern matching
        = would raise MatchError
        <- would return the value that couldn't be matched
      Gotcha
        with is treated as if it were a call to function or macro,
        so it must be followed by parameter or parenthesis on the same line

  End of the Basics

Chapter 5 Anonymous Functions

  Functions and Pattern Matching

    e.g.
      swap = fn {a, b} -> {b, a} end

  Your Turn

    Exercise: Functions-1
    Create the functions that do the following:

      Q: list_concat().([:a, :b], [:c, :d]) # => [:a, :b, :c, :d]
      A: list_concat = fn (list1, list2) -> list1 ++ list2 end

      Q: sum.(1, 2, 3) # => 6
      A: sum = fn(a, b, c) -> a + b + c end

      Q: pair_tuple_to_list.({1234, 5678}) # => [1234, 5678]
      A: pair_tuple_to_list = fn({a, b}) -> [a, b] end

  One Function, Multiple Bodies

    e.g.
      handle_open = fn
        {:ok, file} -> "First line: #{IO.read(file, :line)}"
        {_, error} -> "Error: #{:file.format_error(error)}"
      end

    #{...} string interpolation

  Your Turn

    Exercise: Functions-2
    Write a function that takes three arguments.
    If the first two are zero, return “FizzBuzz.”
    If the first is zero, return “Fizz.”
    If the second is zero, return “Buzz.”
    Otherwise return the third argument.

      fizz = fn
        (0, 0, _) -> "FizzBuzz"
        (0, _, _) -> "Fizz"
        (_, 0, _) -> "Buzz"
        (_, _, c) -> c
      end

    Exercise: Functions-3
    The operator rem(a, b) returns the remainder after dividing a by b.
    Write a function that takes a single integer (n) and calls the
    function in the previous exercise, passing it rem(n,3), rem(n,5), and n.
    Call it seven times with the arguments 10, 11, 12, and so on.
    You should get “Buzz, 11, Fizz, 13, 14, FizzBuzz, 16.”

      fizz_rem = fn(n) -> fizz.(rem(n, 3), rem(n, 5), n) end

  Functions Can Return Functions

    e.g.
      fun1 = fn -> fn -> "Hello" end end
      fun1.()
      fun1.().()

    Functions Remember Their Original Environment
      greeter = fn name -> (fn -> "Hello #{name}" end) end
      add_n = fn n -> (fn other -> n + other end) end

  Your Turn

    Exercise: Functions-4
    Write a function prefix that takes a string.
    It should return a new function that takes a second string.
    When that second function is called, it will return a string
    containing the first string, a space, and the second string.

      prefix = fn s -> fn other -> "#{s} #{other}" end end

  Passing Functions As Arguments

    e.g.
      list = [ 1, 3, 5, 7, 9]
      Enum.map list, fn elem -> elem * 2 end

    Pinned Values and Function Parameters
      e.g.
        defmodule Greeter do
          def for(name, greeting) do
            fn
              (^name) -> "#{greeting} #{name}"
              (_) -> "I don't know you"
            end
          end
        end

        mr_valim = Greeter.for("Jose", "Oi!")

        IO.puts mr_valim.("Jose") # => Oi! Jose
        IO.puts mr_valim.("Dave") # => I don't know you

    The & Notation
      Form 1
        e.g.
        add_one = &(&1 + 1) # same as add_one = fn n -> n + 1 end
        square = &(&1 * &1)
        speak = &(IO.puts(&1))
        divrem = &{div(&1, &2), rem(&1, &2)}
      Form 2
        e.g.
        l = &length/1
        len = &Enum.count/1
        m = &Kernel.min/2

  Your Turn

    Exercise: Functions-5
    Use the &… notation to rewrite the following.

      Q: Enum.map [1,2,3,4], fn x -> x + 2 end
      A: Enum.map [1,2,3,4], &(&1 + 2)

      Q: Enum.each [1,2,3,4], fn x -> IO.inspect x end
      A: Enum.each [1,2,3,4], &IO.inspect/1

  Functions Are the Core

Chapter 6 Modules and Named Functions

  Compiling a Module

    A named function is identified by
      name
      arity (number of parameters)

  The Function’s Body Is a Block

    do...end
      module definitions
      named function definitions
      control structures
      other place where code needs to be handled as an entity

    e.g.
      single-line
        def double(n), do: n * 2
      multi-line
        def greet(greeting, name), do: (
          IO.puts greeting
          IO.puts "How're you doing, #{name}?"
        )

  Your Turn

    Exercise: ModulesAndFunctions-1
    Extend the Times module with a triple function that multiplies its parameter by three.

      defmodule Times do
        def double(n), do: n * 2
        def triple(n), do: n * 3
      end

    Exercise: ModulesAndFunctions-2
    Run the result in iex. Use both techniques to compile the file.

    Exercise: ModulesAndFunctions-3
    Add a quadruple function. (Maybe it could call the double function.…)

      defmodule Times do
        def double(n), do: n * 2
        def triple(n), do: n * 3
        def quadruple(n), do: double(double(n))
      end

  Function Calls and Pattern Matching

    e.g.
      defmodule Factorial do
        def of(0), do: 1
        def of(n), do: n * of(n-1)
      end

    Attention
      Order of these clauses matter because they are tried top to bottom.
      These clauses should be adjacent in the source file.

  Your Turn

    Exercise: ModulesAndFunctions-4
    Implement and run a function sum(n) that uses recursion to calculate the sum of the integers from 1 to n.
    You’ll need to write this function inside a module in a separate file.
    Then load up iex, compile that file, and try your function.

      defmodule Sum do
        def sum(1), do: 1
        def sum(n), do: n + sum(n-1)
      end

    Exercise: ModulesAndFunctions-5
    Write a function gcd(x,y) that finds the greatest common divisor between two nonnegative integers.
    Algebraically, gcd(x,y) is x if y is zero; it’s gcd(y, rem(x,y)) otherwise.

      defmodule Gcd do
        def gcd(x, 0), do: x
        def gcd(x, y), do: gcd(y, rem(x, y))
      end

  Guard Clauses

    e.g.
      defmodule Factorial do
        def of(0), do: 1
        def of(n) when n > 0 do
          n * of(n-1)
        end
      end

    Allowed expressions
      Comparison operators
        ==
        !=
        ===
        !==
        >
        <
        <=
        >=
      Boolean and negation operators
        or
        and
        not
        !
        Note that || and && are not allowed.
      Arithmetic operators
        +
        -
        *
        /
      Join operators
        <> and ++, as long as the left side is a literal.
      The in operator
        Membership in a collection or range
      Type-check functions
        is_atom
        is_binary
        is_bitstring
        is_boolean
        is_exception
        is_float
        is_function
        is_integer
        is_list
        is_map
        is_number
        is_pid
        is_port
        is_record
        is_reference
        is_tuple
      Other functions
        abs(number)
        bit_size(bitstring)
        byte_size(bitstring)
        div(number,number)
        elem(tuple,
        n)
        float(term)
        hd(list)
        length(list)
        node()
        node(pid|ref|port)
        rem(number,number)
        round(number)
        self()
        tl(list)
        trunc(number)
        tuple_size(tuple)

  Default Parameters

    param \\ value
    e.g.
      defmodule Example do
        def func(p1, p2 \\ 2, p3 \\ 3, p4) do
          IO.inspect [p1, p2, p3, p4]
        done
      end

      Example.func("a", "b") # => ["a", 2, 3, "b"]
      Example.func("a", "b", "c") # => ["a", "b", 3, "c"]
      Example.func("a", "b", "c", "d") # => ["a", "b", "c", "d"]

    Your Turn

      Exercise: ModulesAndFunctions-6
      I’m thinking of a number between 1 and 1000.…

      The most efficient way to find the number is to guess halfway between the low and high numbers of the range.
      If our guess is too big, then the answer lies between the bottom of the range and one less than our guess.
      If our guess is too small, then the answer lies between one more than our guess and the end of the range.

      Your API will be guess(actual, range), where range is an Elixir range.

      Your output should look similar to this:
        iex> Chop.guess(273, 1..1000)
        Is it 500
        Is it 250
        Is it 375
        Is it 312
        Is it 281
        Is it 265
        Is it 273
        273

      Hints:
        You may need to implement helper functions with an additional parameter (the currently guessed number).
        The div(a,b) function performs integer division.
        Guard clauses are your friends.
        Patterns can match the low and high parts of a range (a..b=4..8).

        defmodule Chop do
          def guess(actual, range = low..high) do
            mid = div(low + high, 2)
            IO.puts "Is it #{mid}"
            guess actual, range, mid
          end

          defp _guess(actual, _low..high, mid) when actual > mid do
            guess actual, (mid + 1)..high
          end

          defp _guess(actual, _range, actual) do
            actual
          end

          defp _guess(actual, low.._high, mid) when actual < mid do
            guess actual, low..(mid - 1)
          end
        end

  Private Functions

    defp
    Both public and private functions can have multiple heads.
    Can't spread the multiple heads between public and private.

  The Amazing Pipe Operator: |>

    Always use parentheses around function parameters in pipelines.

  Modules

    Provides namespaces for things you define
      named functions
      macros
      structs
      protocols
      other modules
    Module nesting is an illusion

    Directives are lexically scoped
      starts at the point the directive is encountered
      stops at the end of the enclosing scope
    import
      import Module[, only:|except:]
      import Module[, only: :functions|:macros]
    alias
      e.g.
        alias Module.Parser, as Parser
        alias Module.Parser
        alias Module.{Parser, Runner}
    require
      to use macros defined in a module

  Module Attributes

    metadata
    @name value # declared at module level, accessible in functions
    may be set multiple times

  Module Names: Elixir, Erlang, and Atoms

    Elixir module names are just atoms
      is_atom IO # => true
      to_string IO # => "Elixir.IO"
      :"Elixir.IO" === IO # => true
      IO.puts 123 # => 123
      :"Elixir.IO".puts 123 # => 123

  Calling a Function in an Erlang Library

    Erlang variables start with an uppercase letter
    Erlang atoms are simple lowercase names e.g. timer vs :timer in Elixir

  Finding Libraries

    Elixir built-in
    http://hex.pm
    Github
    Erlang built-in

  Your Turn

    Exercise: ModulesAndFunctions-7
    Find the library functions to do the following, and then use each in iex.
    (If the word Elixir or Erlang appears at the end of the challenge,
    then you’ll find the answer in that set of libraries.)

      Q: Convert a float to a string with two decimal digits. (Erlang)
      A: :io.format("~.2f~n", [123.4567])

      Q: Get the value of an operating-system environment variable. (Elixir)
      A: System.get_env("PATH")
      A: :os.getenv("PATH")

      Q: Return the extension component of a file name (so return .exs if given "dave/test.exs"). (Elixir)
      A: Path.extname("dave/test.exs")
      A: :filename.extension("dave/test.exs")

      Q: Return the process’s current working directory. (Elixir)
      A: System.cwd()

      Q: Convert a string containing JSON into Elixir data structures. (Just find; don’t install.)
      A: Poison

      Q: Execute a command in your operating system’s shell.
      A: System.cmd("date", [])
      A: :os.cmd("date") # (FunctionClauseError) no function clause matching in :os.validate/1

Chapter 7 Lists and Recursion

  Heads and Tails

    e.g.
      []
      [3 | []]
      [2 | [3 | []]]
      [1 | [2 | [3 | []]]]
      [a, b, c] = [1, 2, 3]
      [head | tail] = [1, 2, 3]

  Using Head and Tail to Process a List

    e.g.
      defmodule MyList do
        def len([]), do: 0
        def len([_head | tail]), do: 1 + len(tail)
      end

  Using Head and Tail to Build a List

    e.g.
      defmodule MyList do
        def square([]), do: []
        def square([head | tail]), do: [head * head | square(tail)]
      end

  Creating a Map Function

    e.g.
      defmodule MyList do
        def map([], _func), do: []
        def map([head | tail], func), do: [func.(head) | map(tail, func)]
      end

  Keeping Track of Values During Recursion

    e.g.
      defmodule MyList do
        def sum(list), do: _sum(list, 0)

        # private methods
        defp _sum([], total), do: total
        defp _sum([head | tail], total), do: _sum(tail, head + total)
      end

  Your Turn

    Exercise: ListsAndRecursion-0
    I defined our sum function to carry a partial total as a second parameter
    so I could illustrate how to use accumulators to build values.
    The sum function can also be written without an accumulator. Can you do it?

      defmodule MyList do
        def sum([]), do: 0
        def sum([head | tail]), do: head + sum(tail)
      end

  Generalizing Our Sum Function

    e.g.
      defmodule MyList do
        def reduce([], value, _) do
          value
        end

        def reduce([head | tail], value, func) do
          reduce(tail, func.(head, value), func)
        end
      end

  Your Turn

    Exercise: ListsAndRecursion-1
    Write a mapsum function that takes a list and a function.
    It applies the function to each element of the list and then sums the result, so
      iex> MyList.mapsum [1, 2, 3], &(&1 * &1)
      14

      defmodule MyList do
        def map([], _func), do: []
        def map([head | tail], func), do: [func.(head) | map(tail, func)]

        def reduce([], value, _) do
          value
        end

        def reduce([head | tail], value, func) do
          reduce(tail, func.(head, value), func)
        end

        def mapsum(list, func) do
          list
          |> map(func)
          |> reduce(0, &(&1 + &2))
        end
      end

    Exercise: ListsAndRecursion-2
    Write a max(list) that returns the element with the maximum value in the list.
    (This is slightly trickier than it sounds.)

      defmodule MyList do
        def reduce([], value, _) do
          value
        end

        def reduce([head | tail], value, func) do
          reduce(tail, func.(head, value), func)
        end

        def max(list = [head | _tail]) do
          list
          |> reduce(head, &bigger/2)
        end

        def bigger(a, b) when a >= b, do: a
        def bigger(a, b) when a < b, do: b
      end

    Exercise: ListsAndRecursion-3
    An Elixir single-quoted string is actually a list of individual character codes.
    Write a caesar(list, n) function that adds n to each list element,
    wrapping if the addition results in a character greater than z.
      iex> MyList.caesar('ryvkve', 13)
      ?????? :)

      defmodule MyList do
        def map([], _func), do: []
        def map([head | tail], func), do: [func.(head) | map(tail, func)]

        def caeser(list, n) do
          map(list, fn c -> _caeser(c, n) end)
        end

        defp _caeser(c, n) when [c + n] > 'z' do
          c + n - 26
        end

        defp _caeser(c, n) when [c + n] <= 'z' do
          c + n
        end
      end

  More Complex List Patterns

    |, the join operator, supports multiple values to its left.
    e.g.
      defmodule Swapper do
        def swap([]), do: []
        def swap([a, b | tail]), do: [b, a | swap(tail)]
        def swap([_]), do: raise "Can't swap a list with an odd number of elements"
      end

    Lists of Lists

      e.g.
        defmodule WeatherHistory do
          def for_location([], _target_loc), do: []

          def for_location([head = [_, target_loc, _, _] | tail], target_loc) do
            [head, for_location(tail, target_loc)]
          end

          def for_location([_ | tail], target_loc) do
            for_location(tail, target_loc)
          end
        end


  Your Turn

    Exercise: ListsAndRecursion-4
    Write a function MyList.span(from, to) that returns a list of the numbers from from up to to.

      defmodule MyList do
        def span(from, from) do
          [from]
        end

        def span(from, to) when from < to do
          [from | span(from + 1, to)]
        end

        def span(from, to) when from > to do
          [from | span(from - 1, to)]
        end
      end

  The List Module in Action

    e.g.
      [1, 2, 3] ++ [4, 5, 6] # => [1, 2, 3, 4, 5, 6]
      List.flatten([[[1], 2], [[[3]]]]) # => [1, 2, 3]
      List.foldl([1, 2, 3], "", fn value, acc -> "#{value}(#{acc})" end) # => "3(2(1()))"
      List.foldr([1, 2, 3], "", fn value, acc -> "#{value}(#{acc})" end) # => "1(2(3()))"
      List.replace_at([1, 2, 3], 2, "Foo") # => [1, 2, "Foo"]

  Get Friendly with Lists

Chapter 8 Maps, Keyword Lists, Sets, and Structs

  How to Choose Between Maps and Keyword Lists

    Only use Keyword Lists if
      more than one entry use the same key, or
      need to guarantee the elements are ordered

  Keyword Lists

    Typically used in the context of options passed to functions
    e.g.
      defmodule Canvas do
        @defaults [fg: "black", bg: "white", font: "Merriweather"]

        def draw_text(text, options \\ []) do
          options = Keyword.merge(@defaults, options)
          IO.puts "Drawing text #{inspect(text)}"
          IO.puts "Foreground:  #{options[:fg]}"
          IO.puts "Background:  #{Keyword.get(options, :bg)}"
          IO.puts "Font:        #{Keyword.get(options, :font)}"
          IO.puts "Pattern:     #{Keyword.get(options, :pattern, "solid")}"
          IO.puts "Style:       #{inspect Keyword.get_values(options, :style)}"
        end
      end

      Canvas.draw_text("hello", fg: "red", style: "italic", style: "bold")

      # =>
      #   Drawing text "hello"
      #   Foreground:  red
      #   Background:  white
      #   Font:        Merriweather
      #   Pattern:     solid
      #   Style:       ["italic", "bold"]

  Maps

    e.g.
      map = %{name: "Dave", likes: "Programming", where: "Dallas"}
      Maps.keys map # => [:likes, :name, :where]
      Maps.values map # => ["Programming", "Dave", "Dallas"]
      map[:name] # => "Dave"
      map.name # => "Dave"
      map1 = Map.drop map, [:where, :likes] # => %{name: "Dave"}
      map2 = Map.put map, :also_likes, "Ruby"
      # => %{also_likes: "Ruby", likes: "Programming", name: "Dave", where: "Dallas"}
      Map.keys map2 # => [:also_likes, :like, :name, :where]
      Map.has_key? map1, :where # => false
      {value, updated_map} = Map.pop map2, :also_likes
      # => {"Ruby", %{likes: "Programming", name: "Dave", where: "Dallas"}}
      Map.equal? map, updated_map # => true

  Pattern Matching and Updating Maps

    Do you have the following keys (and maybe values)?

    e.g.
      Given person = %{name: "Dave", height: 1.88}

      Is there an entry with the key :name?
      %{name: a_name} = person # => a_name = "Dave"

      Are there entries for the keys :name and :height?
      %{name: _, height: _} = person

      Does the entry with key :name have the value "Dave"?
      %{name: "Dave"} = person

      people = [
        %{name: "Grumpy",    height: 1.24},
        %{name: "Dave",      height: 1.88},
        %{name: "Dopey",     height: 1.32},
        %{name: "Shaquille", height: 2.16},
        %{name: "Sneezy",    height: 1.28}
      ]

      IO.inspect(for person = %{height: height} <- people, height > 1.5, do: person)
      # => [%{height: 1.88, name: "Dave"}, %{height: 2.16, name: "Shaquille"}]

      defmodule HotelRoom do
        def book(%{name: name, height: height})
        when height > 1.9 do
          IO.puts "Need extra long bed for #{name}"
        end

        def book(%{name: name, height: height})
        when height < 1.3 do
          IO.puts "Need low shower controls for #{name}"
        end

        def book(person) do
          IO.puts "Need regular bed for #{person.name}"
        end
      end

      people |> Enum.each(&HotelRoom.book/1)

      # =>
      # Need low shower controls for Grumpy
      # Need regular bed for Dave
      # Need regular bed for Dopey
      # Need extra long bed for Shaquille
      # Need low shower controls for Sneezy

    Pattern Matching Can’t Bind Keys

      e.g. the following is illegal
        %{ item => :ok } = %{ 1 => :ok, 2 => :error }

    Pattern Matching Can Match Variable Keys

      e.g.
        data = %{name: "Dave", state: "TX", likes: "Elixir"}
        for key <- [:name, :likes] do
          %{^key => value} = data
          value
        end
        # => ["Dave", "Elixir"]

  Updating a Map

    new_map = %{old_map | key => value, ...}
    e.g.
      m = %{a: 1, b: 2, c: 3}
      m1 = %{m | b: "two", c: "three"} # => m1 = {a: 1, b: "two", c: "three"}
    use Map.put_new/3 to add a new key

  Structs

    a module
    wraps a map that
      only use atoms for keys
      lacks Dict capability
    e.g.
      defmodule Subscriber do
        defstruct name: "", paid: false, over_18: true
      end

      # Create
      s1 = %Subscriber{}
      # => %Subscriber{name: "", over_18: true, paid: false}
      s2 = %Subscriber{name: "Dave"}
      # => %Subscriber{name: "Dave", over_18: true, paid: false}
      s3 = %Subscriber{name: "Mary", paid: true}
      # => %Subscriber{name: "Mary", over_18: true, paid: true}

      # Read
      s3.name # => "Mary"
      %Subscriber{name: a_name} = s3 # => a_name = "Mary"

      # Write
      # Return new copy
      s4 = %Subscriber{s3 | name: "Marie"}
      # => %Subscriber{name: "Marie", over_18: true, paid: true}

  Nested Dictionary Structures

    e.g.
      defmodule Customer do
        defstruct name: "", company: ""
      end

      defmodule BugReport do
        defstruct owner: %Customer{}, details: "", severity: 1
      end

      report = %BugReport{owner: %Customer{name: "Dave", company: "Pragmatic"},
                          details: "Broken"}

      put_in(report.owner.company, "PragProg")
      update_in(report.owner.name, &("Mr. " <> &1))

    Nested Accessors and Nonstructs

      # Macros, operate at compile time
      #   number of keys passed to a call are static
      #   can't pass the set of keys as parameters between functions
      report = %{owner: %{name: "Dave", company: "Pragmatic"}, severity: 1}
      put_in(report[:owner][:company], "PragProg")
      update_in(report[:owner][:name], &("Mr. " <> &1))

      # Functions, dynamic
      get_in(report, [:owner, :name])

      Compare
                          Macro         Function
        get_in            no            (dict, keys)
        put_in            (path, value) (dict, keys, value)
        update_in         (path, fn)    (dict, keys, fn)
        get_and_update_in (path, fn)    (dict, keys, fn)

      Trick

        authors = [
          %{name: "Jose", language: "Elixir"},
          %{name: "Matz", language: "Ruby"},
          %{name: "Larry", language: "Perl"}
        ]

        language_with_an_r = fn(:get, collection, next_fn) ->
          for row <- collection do
            if String.contains?(row.language, "r") do
              next_fn.(row)
            end
          end
        end

        IO.inspect get_in(authors, [language_with_an_r, :name])
        # => ["Jose", nil, "Larry"]

  Sets

    Just MapSet

    set1 = Enum.into 1..5, MapSet.new # => set1 = #MapSet<[1, 2, 3, 4, 5]>
    MapSet.member? set1, 3 # => true
    set1 = Enum.into 3..8, MapSet.new # => set2 = #MapSet<[3, 4, 5, 6, 7, 8]>
    MapSet.union set1, set2 # => #MapSet<[1, 2, 3, 4, 5, 6, 7, 8]>
    MapSet.difference set1, set2 # => #MapSet<[1, 2]>
    MapSet.difference set2, set1 # => #MapSet<[6, 7, 8]>
    MapSet.intersection set2, set1 # => #MapSet<[3, 4, 5]>

  With Great Power Comes Great Temptation

Chapter 9 An Aside—What Are Types?

Chapter 10 Processing Collections—Enum and Stream

  Enum—Processing Collections
  Streams—Lazy Enumerables
  The Collectable Protocol
  Comprehensions
  Moving Past Divinity

Chapter 11 Strings and Binaries

  String Literals
  The Name “strings”
  Single-Quoted Strings—Lists of Character Codes
  Binaries
  Double-Quoted Strings Are Binaries
  Binaries and Pattern Matching
  Familiar Yet Strange

Chapter 12 Control Flow

  if and unless
  cond
  case
  Raising Exceptions
  Designing with Exceptions
  Doing More with Less

Chapter 13 Organizing a Project

  The Project: Fetch Issues from GitHub
  Task: Use Mix to Create Our New Project
  Transformation: Parse the Command Line
  Step: Write Some Basic Tests
  Transformation: Fetch from GitHub
  Task: Use Libraries
  Transformation: Convert Response
  Transformation: Sort Data
  Transformation: Take First n Items
  Transformation: Format the Table
  Task: Make a Command-Line Executable
  Task: Add Some Logging
  Task: Test the Comments
  Task: Create Project Documentation
  Coding by Transforming Data

Part 2 Concurrent Programming

Chapter 14 Working with Multiple Processes

  A Simple Process
  Process Overhead
  When Processes Die
  Parallel Map—The “Hello, World” of Erlang
  A Fibonacci Server
  Agents—A Teaser
  Thinking in Processes

Chapter 15 Nodes—The Key to Distributing Services

  Naming Nodes
  Naming Your Processes
  I/O, PIDs, and Nodes
  Nodes Are the Basis of Distribution

Chapter 16 OTP: Servers

  Some OTP Definitions
  An OTP Server
  GenServer Callbacks
  Naming a Process
  Tidying Up the Interface

Chapter 17 OTP: Supervisors

  Supervisors and Workers
  Supervisors Are the Heart of Reliability

Chapter 18 OTP: Applications

  This Is Not Your Father’s Application
  The Application Specification File
  Turning Our Sequence Program into an OTP Application
  Supervision Is the Basis of Reliability
  Releasing Your Code
  EXRM—the Elixir Release Manager
  OTP Is Big—Unbelievably Big

Chapter 19 Tasks and Agents

  Tasks
  Agents
  A Bigger Example
  Agents and Tasks, or GenServer?

Part 3 More-Advanced Elixir

Chapter 20 Macros and Code Evaluation

  Implementing an if Statement
  Macros Inject Code
  Using the Representation As Code
  Using Bindings to Inject Values
  Macros Are Hygienic
  Other Ways to Run Code Fragments
  Macros and Operators
  Digging Deeper
  Digging Ridiculously Deep

Chapter 21 Linking Modules: Behavio(u)rs and Use

  Behaviours
  Use and using
  Putting It Together—Tracing Method Calls
  Use use

Chapter 22 Protocols—Polymorphic Functions

  Defining a Protocol
  Implementing a Protocol
  The Available Types
  Protocols and Structs
  Build-In Protocols
  Protocols Are Polymorphism

Chapter 23 More Cool Stuff

  Writing Your Own Sigils
  Multi-app Umbrella Projects
  But Wait! There’s More!
