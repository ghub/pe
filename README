Programming Elixir 1.2
Dave Thomas
2016

Chapter 1: Take the Red Pill

Programming should be about transforming data.

Part 1 Conventional Programming

= match operator
[1, 2, 3] list
[a, b, c] = [1, 2, 3] pattern matching

Exercise: PatternMatching-1

a = [1, 2, 3] will match => a = [1, 2, 3]
a = 4 will match => a = 4
4 = a will match => a = 4
[a, b] = [1, 2, 3] will not match
a = [[1, 2, 3]] will match a = [[1, 2, 3]]
[a] = [[1, 2, 3]] will match a = [1, 2, 3]
[[a]] = [[1, 2, 3]] will not match

Ignoring a value with _ (underscore)

Variable bind once (per match)

^ (a caret) pin operator

Exercise: PatternMatching-2

[a, b, a] = [1, 2, 3] will not match
[a, b, a] = [1, 1, 2] will not match
[a, b, a] = [1, 2, 1] will match => a = 1, b = 2

Exercise: PatternMatching-3

Given a = 2

[a, b, a] = [1, 2, 3] will not match
[a, b, a] = [1, 1, 2] will not match
a = 1 will match => a = 1
^a = 2 will match => a = 2
^a = 1 will not match
^a = 2 - a will not match

Built-in types
  Value types
    Arbitray-sized integers
    Floating-point numbers
    Atoms
    Ranges
    Regular expressions
  System types
    PIDs and ports
    References
  Collection types
    Tuples
    Lists
    Maps
    Binaries

Value types
  Integers
    Unlimited size
    e.g.
      Decimal 1234 1_000_000
      Hexadicimal 0xcafe
      Octal 0o765
      Binary 0b1010
  Floating-point numbers
    Must contain one dicimal with at least one digit on each side
    May contain trailing exponent
    IEEE 754 double precision
    e.g.
      1.0
      0.2456
      0.314159e1
      314159.0e-5
  Atoms
    Constants that represent names
    : followed by atom word or Elixir operator
    Atom word may contain
      Letters
      Digits
      Underscores
      @ signs
    May end with
      !
      ?
    :"arbitray characters"
    e.g.
      :fred
      :is_binary?
      :var@2
      :<>
      :===
      :"func/3"
      :"long john silver"
  Ranges
    start..end
    start and end must be integer
  Regular expressions
    ~r{regexp} or ~r{regexp}opts
    Delimeters can be any non-alpha-numeric characters
    / must be escaped if / is the delimeter
    Implemened with PCRE, compatible with Perl 5

System types
  Resources in the Erlang VM
  PID refers to a local or remote process
  Port refers to a resource you are reading or writing
  Current process' PID is availale by calling self
  make_ref creates a globally unique reference

Collection types
  Tuples
    Ordered collection of values
    Typically has 2 to 4 elements, if more, use maps or structs
    Common for functions to return a tuple that begins with :ok if successful
    e.g.
      {1, 2}
      {:ok, 42, "next"}
      {:error, :enoent}
  Lists
    Linked list
    Operators
      ++
      --
      in
  Keyword Lists
    [name: "Dave", city: "Dallas", likes: "Programming"] =>
    [{:name, "Dave"}, {:city, "Dallas"}, {:likes, "Programming"}]
    May leave off the square brackets if a keyword list is the last element in a function call
    May leave off the brackets if a keyword list appears as the last item in any conext where
      a list of value is expected

Maps
  Collection of key/value pairs
  e.g.
    states = %{"AL" => "Alabama", "WI" => "Wisconsin"}
    response_types = %{{:error, :enoent} => :fatal, {:error, :busy} => :retry}
    colors = %{:red => 0xff0000, :green => 0x00ff00; :blue => 0x0000ff}
  Key types can differ
    %{"one" => 1, :two => 2, {1, 1, 1} => 3}
  Shortcut when key is atom
    %{blue: 255, green: 65280, red: 16711680}
  Keys must be unique, contrary to keyword list
  Efficient to grow
  Accessing
    states["AL"]
    colors[:red]
    colors.green # only when key is atom

Binaries
  Bits and bytes
  e.g.
    <<1, 2>>
    <<3::size(2), 5::size(4), 1::size(2)>>

Names
  BumpyCase
    Module
    Record
    Protocol
    Behavior
  snake_case
    Others

Truth
  true (truthy: neither false nor nil in most contexts)
  false
  nil (treated as false in Boolean context)

Operators
  Comparison operators
    a === b # strict equality, so 1 === 1.0 is false
    a !== b # strict inequality, so 1 !== 1.0 is true
    a == b # value equality, so 1 == 1.0 is true
    a != b # value inequality, so 1 != 1.0 is false
    a > b
    a >= b
    a < b
    a <= b
    ordering comparisons
      number < atom < reference < function < port < pid < tuple < map < list < binary
  Boolean operators
    Strict: expect true or false as first argument
      a or b # true if a is true, otherwise b
      a and b # false if a is false, otherwise b
      not a # false if a is true, true otherwise
    Relaxed: take arguments of any type. Any value other than false or nil is true.
      a || b # a if a is truthy, otherwise b
      a && b # b if a is truthy, otherwise a
      !a # false if a is truthy, otherwise true
  Arithmatic operators
    +
    -
    *
    / # integer division yields floating point result, e.g. 2 / 1 => 2.0
    div # div(a, b) gets integer result
    rem # result has the same sign as first argument, e.g. rem(15, 4) => 3, rem(-15, 4) => -3
  Join operators
    binary1 <> binary2 # cancatenates two binaries
    list1 ++ list2 # cancatenates two lists
    list1 -- list2 # returns elements in list1 but not in list2
  The in operator
    a in enum # test if a is included in enum, e.g. a list or a range

Variable Scope
  Lexically scoped
    Variables (including parameters) defined in a function are local to that function.
    Variables defined in a module are local.
      They are only accessible at the top level of the module.
      They are not accessible in functions defined in the module.
    For
    With

with
  Defines a local scope for variables
  Pattern matching
    = would raise MatchError
    <- would return the value that couldn't be matched
  Gotcha
    with is treated as if it were a call to function or macro,
    so it must be followed by parameter or parenthesis on the same line
